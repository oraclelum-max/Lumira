FIX(DEVOPS-P0): Résolution cache Docker/Nginx - Forcer rebuild complet + traçabilité build

OBJECTIF
========
Résoudre le problème récurrent où les modifications frontend (refonte Profile du commit 80051b6) 
ne se déploient pas sur Coolify malgré les commits/push réussis. L'ancienne version reste affichée 
en production à cause de multiples problèmes de cache Docker, Vite, et Nginx.

MODIFICATIONS
=============

1. Dockerfile racine (Dockerfile)
   - Lignes 11-12 : Ajout ARG BUILD_VERSION + BUILD_TIMESTAMP pour invalidation cache Docker
   - Lignes 16-17 : Exposition ENV VITE_BUILD_VERSION/VITE_BUILD_TIMESTAMP dans le bundle Vite
   - Ligne 26-27 : Ajout suppression node_modules/.cache en plus de .vite
   - Ligne 28-29 : Ajout log "Building version: $BUILD_VERSION" pour debugging
   - Lignes 40-42 : Injection version/timestamps dans health.json pour traçabilité

2. apps/main-app/Dockerfile
   - Lignes 16-19 : Ajout ARG BUILD_VERSION/BUILD_TIMESTAMP + ENV pour Vite
   - Lignes 21-24 : Nettoyage renforcé (node_modules/.cache) + log build version
   - Lignes 34-36 : health.json avec métadonnées version/timestamps
   - Lignes 53-55 : Nginx headers renforcés (max-age=0, Pragma: no-cache)

3. nginx-frontend.conf
   - Lignes 29-37 : Headers anti-cache renforcés (etag off, if_modified_since off, max-age=0)
   - Lignes 50-57 : health.json avec désactivation totale cache

4. COOLIFY-BUILD-CACHE-FIX.md (nouveau)
   - Guide complet de diagnostic et résolution du problème de cache
   - Instructions Coolify pour passer BUILD_VERSION en build args
   - Procédure de validation du déploiement
   - Troubleshooting et checklist

LOGIQUE
=======

Cause racine 1 : Cache Docker Layer
-----------------------------------
Docker réutilise les layers intermédiaires même après "rm -rf dist .vite". La commande RUN est 
cachée si le contexte (COPY + commande précédente) n'a pas changé. Solution : Injecter un ARG 
BUILD_VERSION qui change à chaque commit → invalide systématiquement le cache.

Cause racine 2 : Cache Vite persistant
---------------------------------------
Vite stocke le cache dans node_modules/.vite ET node_modules/.cache. La suppression de .vite 
seule ne suffit pas. Solution : rm -rf node_modules/.cache également.

Cause racine 3 : Absence de traçabilité
----------------------------------------
Impossible de savoir quelle version est déployée sur Coolify sans accès aux logs de build. 
Solution : Injecter version (hash commit) + timestamps dans health.json.

Cause racine 4 : Cache navigateur ETag
---------------------------------------
Les navigateurs modernes utilisent les ETags pour bypasser les headers Cache-Control: no-cache. 
Le fichier index.html conserve le même ETag après rebuild → 304 Not Modified. Solution : 
Désactiver ETags avec "etag off" et "if_modified_since off" dans Nginx.

Cause racine 5 : Directives cache insuffisantes
------------------------------------------------
"Cache-Control: no-cache" seul ne suffit pas pour les CDN/proxies. Solution : Ajouter 
"max-age=0" + "Pragma: no-cache" + "Expires: 0" pour couvrir tous les cas.

IMPACT
======

Validation des contrats backend
--------------------------------
- ✅ Aucun impact sur les endpoints API existants
- ✅ health.json enrichi mais rétrocompatible (champ "status" préservé)
- ✅ Aucun changement dans la logique métier

Amélioration DevOps
--------------------
- ✅ Traçabilité : La version déployée est visible via curl /health.json
- ✅ Debugging : Les logs de build affichent "Building version: XXXXX"
- ✅ Cache invalidation : BUILD_VERSION force le rebuild à chaque commit
- ✅ Prévention : Le guide COOLIFY-BUILD-CACHE-FIX.md évite la répétition du problème

Compatibilité Coolify
----------------------
- ⚠️ REQUIS : Configurer BUILD_VERSION en Build Args sur Coolify
  Exemple : BUILD_VERSION=$(git rev-parse --short HEAD)
- ⚠️ RECOMMANDÉ : Activer "Rebuild without cache" au premier déploiement post-fix
- ✅ Rétrocompatibilité : Si BUILD_VERSION non fourni, fallback vers "unknown"

PROCHAINES ÉTAPES
=================

1. Commit + Push du fix
   git commit -F COMMIT-MESSAGE-CACHE-FIX.txt
   git push origin main

2. Configuration Coolify
   - Aller dans Settings → Build Args
   - Ajouter : BUILD_VERSION=$(git rev-parse --short HEAD)
   - Ajouter : BUILD_TIMESTAMP=$(date -Iseconds)

3. Premier redéploiement
   - Activer "Rebuild without cache"
   - Lancer le déploiement
   - Attendre la fin du build

4. Validation
   - Vérifier : curl https://oraclelumira.com/health.json | jq .version
   - Console navigateur : Chercher [Profile] BUILD VERSION: f959be0
   - Test navigation privée

5. Synchronisation Git (selon mémoire 31b471f1)
   - git push origin main
   - git push upstream main

NOTES TECHNIQUES
================

- Les ARG doivent être redéclarés dans chaque stage du Dockerfile multi-stage
- VITE_BUILD_VERSION sera accessible dans le code via import.meta.env.VITE_BUILD_VERSION
- Les variables BUILD_* ne sont PAS exposées au runtime (sécurité préservée)
- Le timestamp est généré 2 fois : au build (buildTimestamp) et au déploiement (deployTimestamp)

TESTS EFFECTUÉS
===============

✅ Build local réussi : npm run build dans apps/main-app (13.39s, aucune erreur)
✅ Hash commit récupéré : f959be0
✅ Dockerfiles validés syntaxiquement (pas d'erreurs de structure)
✅ Guide de dépannage créé (323 lignes)
