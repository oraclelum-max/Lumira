#!/bin/sh

# Oracle Lumira Fullstack Startup Script
echo "üöÄ Starting Oracle Lumira Fullstack..."

# Set working directory
cd /app

# Create required directories
mkdir -p /app/logs
mkdir -p /app/uploads
mkdir -p /app/generated

# Verify ecosystem.config.json exists
if [ ! -f "ecosystem.config.json" ]; then
    echo "‚ùå ecosystem.config.json not found!"
    ls -la /app/
    exit 1
fi

# Show PM2 config for debugging
echo "üìã Using PM2 config:"
cat ecosystem.config.json

# Start API backend with PM2 in background
echo "üì° Starting API backend..."
echo "üîç Directory contents:"
ls -la /app/apps/api-backend/

echo "üîç Checking if server.js exists:"
ls -la /app/apps/api-backend/dist/

# Test if Node.js can require the built server
echo "üîç Testing built server file:"
if [ -f "/app/apps/api-backend/dist/server.js" ]; then
    echo "‚úÖ server.js exists"
    node -e "console.log('Node.js can run')"
else
    echo "‚ùå server.js missing!"
    exit 1
fi

# Start PM2 in background (daemon mode)
pm2 start ecosystem.config.json

# Start nginx immediately (don't wait for API)
echo "üåê Starting nginx..."
echo "üì° API will start in background, nginx serving frontend immediately"

# Wait for API to be ready before starting nginx
echo "‚è≥ Waiting for API backend to be ready..."
for i in $(seq 1 30); do
    sleep 2
    if curl -f http://localhost:3001/api/health > /dev/null 2>&1; then
        echo "‚úÖ API backend is ready! (after ${i}x2s)"
        break
    else
        echo "‚è≥ Attempt $i/30: API not ready yet..."
        if [ $i -eq 30 ]; then
            echo "‚ùå API failed to start after 60s! PM2 status:"
            pm2 status
            pm2 logs --lines 30
            echo "‚ö†Ô∏è Starting nginx anyway to serve frontend..."
        fi
    fi
done

# Test API health in background while nginx runs
(
    echo "üîç API monitoring in background..."
    for i in $(seq 1 60); do
        sleep 10
        if curl -f http://localhost:3001/api/health > /dev/null 2>&1; then
            echo "‚úÖ API backend running normally (check ${i})"
        else
            echo "‚ö†Ô∏è API health check failed (check ${i})"
            pm2 status
        fi
    done
) &

# Start nginx in foreground (main process)
nginx -g "daemon off;"
