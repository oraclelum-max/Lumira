#!/usr/bin/env pwsh
# Oracle Lumira - Automated Vulnerability Scanner
Write-Host "üîç Starting Oracle Lumira Security Scan..." -ForegroundColor Green

# Frontend vulnerability check
Write-Host "`nüì¶ Scanning Frontend Dependencies..." -ForegroundColor Yellow
Push-Location "apps/main-app"
try {
    $frontendAudit = npm audit --json | ConvertFrom-Json
    $frontendVulns = $frontendAudit.metadata.vulnerabilities
    Write-Host "Frontend: $($frontendVulns.total) vulnerabilities found" -ForegroundColor $(if($frontendVulns.high -gt 0){"Red"}else{"Yellow"})
    Write-Host "  High: $($frontendVulns.high), Moderate: $($frontendVulns.moderate), Low: $($frontendVulns.low)"
} catch {
    Write-Host "‚ùå Failed to scan frontend dependencies" -ForegroundColor Red
    $frontendVulns = @{total=0; high=0; moderate=0; low=0}
}
Pop-Location

# Backend vulnerability check
Write-Host "`nüì¶ Scanning Backend Dependencies..." -ForegroundColor Yellow
Push-Location "apps/api-backend"
try {
    $backendAudit = npm audit --json | ConvertFrom-Json
    $backendVulns = $backendAudit.metadata.vulnerabilities
    Write-Host "Backend: $($backendVulns.total) vulnerabilities found" -ForegroundColor $(if($backendVulns.high -gt 0){"Red"}elseif($backendVulns.total -gt 0){"Yellow"}else{"Green"})
    Write-Host "  High: $($backendVulns.high), Moderate: $($backendVulns.moderate), Low: $($backendVulns.low)"
} catch {
    Write-Host "‚ùå Failed to scan backend dependencies" -ForegroundColor Red
    $backendVulns = @{total=0; high=0; moderate=0; low=0}
}
Pop-Location

# Docker security scan
Write-Host "`nüê≥ Docker Security Check..." -ForegroundColor Yellow
$dockerScanResult = "SKIP"
if (Get-Command docker -ErrorAction SilentlyContinue) {
    Write-Host "Building test image for security scan..."
    try {
        docker build -t lumira-security-test . | Out-Null
        
        # Use trivy if available
        if (Get-Command trivy -ErrorAction SilentlyContinue) {
            Write-Host "Running Trivy security scan..."
            trivy image lumira-security-test --quiet
        } else {
            Write-Host "‚ö†Ô∏è  Trivy not installed. Install with: 'winget install Aqua.Trivy'" -ForegroundColor Yellow
        }
        
        docker rmi lumira-security-test -f | Out-Null
        $dockerScanResult = "COMPLETED"
    } catch {
        Write-Host "‚ùå Docker scan failed: $_" -ForegroundColor Red
        $dockerScanResult = "FAILED"
    }
} else {
    Write-Host "‚ö†Ô∏è  Docker not available for security scan" -ForegroundColor Yellow
}

# Security configuration checks
Write-Host "`nüîß Configuration Security Check..." -ForegroundColor Yellow
$configIssues = @()

# Check nginx configuration
if (Test-Path "nginx-fullstack.conf") {
    $nginxConfig = Get-Content "nginx-fullstack.conf" -Raw
    if ($nginxConfig -match "server_tokens off") {
        Write-Host "‚úÖ Server tokens hidden"
    } else {
        $configIssues += "Missing 'server_tokens off' in nginx config"
    }
    
    if ($nginxConfig -match "add_header.*X-Frame-Options") {
        Write-Host "‚úÖ Security headers configured"
    } else {
        $configIssues += "Security headers not fully configured"
    }
} else {
    $configIssues += "nginx-fullstack.conf not found"
}

# Check Dockerfile security
if (Test-Path "Dockerfile") {
    $dockerfileContent = Get-Content "Dockerfile" -Raw
    if ($dockerfileContent -match "USER.*lumira") {
        Write-Host "‚úÖ Non-root user configured"
    } else {
        $configIssues += "Non-root user not properly configured"
    }
} else {
    $configIssues += "Dockerfile not found"
}

# Display configuration issues
if ($configIssues.Count -gt 0) {
    Write-Host "`n‚ö†Ô∏è  Configuration Issues Found:" -ForegroundColor Yellow
    $configIssues | ForEach-Object { Write-Host "  - $_" -ForegroundColor Yellow }
}

# Generate security report
$totalVulns = $frontendVulns.total + $backendVulns.total
$highVulns = $frontendVulns.high + $backendVulns.high
$overallStatus = if ($highVulns -eq 0 -and $configIssues.Count -eq 0) { "PASS" } elseif ($highVulns -gt 0) { "FAIL" } else { "WARNING" }

$report = @{
    timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    overall_status = $overallStatus
    vulnerabilities = @{
        total = $totalVulns
        high = $highVulns
        moderate = $frontendVulns.moderate + $backendVulns.moderate
        low = $frontendVulns.low + $backendVulns.low
        frontend = $frontendVulns
        backend = $backendVulns
    }
    configuration = @{
        issues_count = $configIssues.Count
        issues = $configIssues
    }
    docker_scan = $dockerScanResult
}

$report | ConvertTo-Json -Depth 4 | Out-File "security/security-report.json" -Encoding UTF8
Write-Host "`nüìä Security Report Summary:" -ForegroundColor Cyan
Write-Host "  Overall Status: $overallStatus" -ForegroundColor $(if($overallStatus -eq "PASS"){"Green"}elseif($overallStatus -eq "FAIL"){"Red"}else{"Yellow"})
Write-Host "  Total Vulnerabilities: $totalVulns (High: $highVulns)"
Write-Host "  Configuration Issues: $($configIssues.Count)"
Write-Host "`n‚úÖ Security scan completed. Report saved to security/security-report.json" -ForegroundColor Green

if ($overallStatus -eq "FAIL") {
    Write-Host "`nüö® CRITICAL: High severity vulnerabilities found. Apply security patches immediately!" -ForegroundColor Red
    exit 1
} elseif ($overallStatus -eq "WARNING") {
    Write-Host "`n‚ö†Ô∏è  WARNING: Issues detected. Review and resolve before production deployment." -ForegroundColor Yellow
    exit 2
} else {
    Write-Host "    Write-Host "`n‚úÖ PASSED: No critical security issues detected." -ForegroundColor Green" -ForegroundColor Green
    exit 0
}
