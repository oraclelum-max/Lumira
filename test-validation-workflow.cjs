#!/usr/bin/env node

/**
 * Script de test du workflow complet de validation Oracle Lumira
 * 1. Cr√©ation d'une commande via API main-app
 * 2. Traitement expert ‚Üí n8n ‚Üí callback avec awaiting_validation
 * 3. Test routes de validation Expert Desk
 * 4. Test approbation/rejet du contenu
 */

const axios = require('axios');

const API_BASE = process.env.API_BASE_URL || 'http://localhost:3001/api';
const EXPERT_EMAIL = 'expert@oraclelumira.com';
const EXPERT_PASSWORD = 'Lumira2025L';

async function testValidationWorkflow() {
  console.log('üöÄ Test workflow de validation Oracle Lumira');
  console.log('üì° API Base:', API_BASE);
  
  try {
    // 1. Cr√©er une commande test
    console.log('\nüìù 1. Cr√©ation commande test...');
    const orderData = {
      level: 3, // Niveau Alchimique pour test complet
      amount: 8900, // 89‚Ç¨ pour niveau Alchimique
      formData: {
        firstName: 'Test',
        lastName: 'Validation',
        email: 'test.validation@example.com',
        phone: '+33123456789',
        dateOfBirth: '1985-03-20',
        specificQuestion: 'Test complet du syst√®me de validation Expert Desk avec aper√ßu stellaire'
      },
      metadata: {
        source: 'test-validation-workflow',
        timestamp: new Date().toISOString()
      }
    };

    const orderResponse = await axios.post(`${API_BASE}/products/create-order`, orderData);
    const orderId = orderResponse.data.orderId;
    console.log('‚úÖ Commande cr√©√©e:', orderId);

    // 2. Simuler paiement r√©ussi
    console.log('\nüí≥ 2. Simulation paiement r√©ussi...');
    await axios.post(`${API_BASE}/products/simulate-payment`, {
      orderId: orderId,
      status: 'paid'
    });
    console.log('‚úÖ Paiement simul√©');

    // 3. Login Expert
    console.log('\nüîê 3. Login Expert...');
    const loginResponse = await axios.post(`${API_BASE}/expert/login`, {
      email: EXPERT_EMAIL,
      password: EXPERT_PASSWORD
    });
    
    if (!loginResponse.data.success) {
      throw new Error('Login expert √©chou√©');
    }
    
    const expertToken = loginResponse.data.token;
    console.log('‚úÖ Expert connect√©:', loginResponse.data.expert.name);

    // 4. Traitement par Expert ‚Üí n8n
    console.log('\nüßô‚Äç‚ôÄÔ∏è 4. Traitement Expert ‚Üí n8n...');
    const promptData = {
      orderId: orderId,
      expertPrompt: `Test validation Expert Desk pour ${orderData.formData.firstName} ${orderData.formData.lastName}. 
      
      Lecture vibratoire niveau ${orderData.level} (Alchimique) pour: "${orderData.formData.specificQuestion}"
      
      Cette lecture testera le syst√®me de validation avec aper√ßu complet.`,
      expertInstructions: 'Test workflow validation - g√©n√©rer contenu pour validation Expert'
    };

    const processResponse = await axios.post(`${API_BASE}/expert/process-order`, promptData, {
      headers: { Authorization: `Bearer ${expertToken}` }
    });

    console.log('‚úÖ Commande envoy√©e √† n8n:', processResponse.data.orderNumber);

    // 5. Simuler callback n8n avec contenu g√©n√©r√©
    console.log('\nü§ñ 5. Simulation callback n8n avec contenu...');
    const callbackData = {
      orderId: orderId,
      success: true,
      generatedContent: {
        archetype: 'L\'Alchimiste Stellaire',
        reading: `Cher(√®re) ${orderData.formData.firstName},

Votre chemin spirituel r√©v√®le une √¢me d'Alchimiste Stellaire, guid√©e par les √©nergies cosmiques de transformation.

VOTRE ARCH√âTYPE SPIRITUEL
L'Alchimiste Stellaire est un √™tre rare qui transforme les √©nergies dense en lumi√®re pure. Vous portez en vous la capacit√© unique de transmuter les d√©fis en sagesse, les obstacles en opportunit√©s d'√©volution.

LECTURE VIBRATOIRE PERSONNALIS√âE
Les √©toiles murmurent votre nom avec respect, car vous √™tes l'un de ces √™tres pr√©cieux qui √©clairent le chemin pour les autres. Votre question "${orderData.formData.specificQuestion}" r√©v√®le une qu√™te profonde de sens et d'authenticit√©.

GUIDANCE STELLAIRE
Le cosmos vous invite √† embrasser pleinement votre nature transformatrice. Chaque exp√©rience, m√™me difficile, nourrit votre pouvoir alchimique. Vous √™tes appel√©(e) √† rayonner votre lumi√®re unique dans ce monde.

RITUAL DE CONNEXION
Chaque soir, avant le coucher, regardez les √©toiles pendant 5 minutes en respirant profond√©ment. Visualisez votre lumi√®re int√©rieure se connectant √† la vo√ªte c√©leste. Dites: "Je suis un pont entre Terre et Ciel, je transforme avec amour."

Que les √©toiles vous b√©nissent sur votre chemin sacr√©.

Avec toute ma gratitude cosmique,
Oracle Lumira ‚ú®`,
        audioUrl: 'https://example.com/audio/test-validation.mp3',
        pdfUrl: 'https://example.com/pdf/test-validation.pdf',
        mandalaSvg: '<svg width="200" height="200"><circle cx="100" cy="100" r="80" fill="none" stroke="#fbbf24" stroke-width="2"/><text x="100" y="105" text-anchor="middle" fill="#fbbf24" font-size="12">Mandala Test</text></svg>',
        ritual: 'Rituel quotidien de connexion stellaire d√©crit ci-dessus.',
        blockagesAnalysis: 'Blocages identifi√©s: peur du jugement, doute de soi',
        soulProfile: '√Çme ancienne, guide naturel, catalyseur de transformation'
      },
      files: [
        { type: 'audio', url: 'https://example.com/audio/test-validation.mp3' },
        { type: 'pdf', url: 'https://example.com/pdf/test-validation.pdf' }
      ]
    };

    const callbackResponse = await axios.post(`${API_BASE}/expert/n8n-callback`, callbackData);
    console.log('‚úÖ Callback trait√©:', callbackResponse.data.status);

    if (callbackResponse.data.status !== 'awaiting_validation') {
      throw new Error(`Statut attendu 'awaiting_validation', re√ßu: ${callbackResponse.data.status}`);
    }

    // 6. Test r√©cup√©ration queue de validation
    console.log('\nüìã 6. Test queue de validation...');
    const validationQueueResponse = await axios.get(`${API_BASE}/expert/orders/validation-queue`, {
      headers: { Authorization: `Bearer ${expertToken}` }
    });

    const validationOrders = validationQueueResponse.data.orders;
    console.log(`‚úÖ ${validationOrders.length} commandes en attente de validation`);

    const testOrder = validationOrders.find(o => o._id === orderId);
    if (!testOrder) {
      throw new Error('Commande test non trouv√©e dans la queue de validation');
    }

    console.log('‚úÖ Commande trouv√©e dans queue validation:');
    console.log('   - ID:', testOrder._id);
    console.log('   - Statut:', testOrder.status);
    console.log('   - Validation Status:', testOrder.expertValidation?.validationStatus);
    console.log('   - Contenu:', testOrder.generatedContent ? 'Pr√©sent' : 'Absent');

    // 7. Test rejet du contenu pour r√©g√©n√©ration
    console.log('\n‚ùå 7. Test rejet du contenu...');
    const rejectData = {
      orderId: orderId,
      action: 'reject',
      validationNotes: 'Test de rejet - le contenu doit √™tre am√©lior√© avec plus de d√©tails spirituels',
      rejectionReason: 'Manque de profondeur dans l\'analyse vibratoire, besoin de plus de guidance pratique'
    };

    const rejectResponse = await axios.post(`${API_BASE}/expert/validate-content`, rejectData, {
      headers: { Authorization: `Bearer ${expertToken}` }
    });

    console.log('‚úÖ Contenu rejet√©:', rejectResponse.data.message);
    console.log('   - R√©vision Count:', rejectResponse.data.revisionCount);

    // 8. Simuler nouveau callback apr√®s r√©g√©n√©ration
    console.log('\nüîÑ 8. Simulation r√©g√©n√©ration apr√®s rejet...');
    const revisionCallbackData = {
      ...callbackData,
      isRevision: true,
      generatedContent: {
        ...callbackData.generatedContent,
        reading: callbackData.generatedContent.reading + `

GUIDANCE APPROFONDIE (R√©vision)
Suite √† votre demande de clarification, les √©nergies stellaires m'ont guid√©e pour vous offrir cette guidance suppl√©mentaire:

Votre chemin d'Alchimiste Stellaire se d√©ploie en trois phases:
1. PHASE TERRE: Ancrage de vos dons (en cours)
2. PHASE √âTHER: Expansion de votre influence spirituelle 
3. PHASE COSMOS: Ma√Ætrise compl√®te de la transformation alchimique

Des exercices pratiques vous seront transmis pour acc√©l√©rer cette √©volution sacr√©e.`
      }
    };

    const revisionCallbackResponse = await axios.post(`${API_BASE}/expert/n8n-callback`, revisionCallbackData);
    console.log('‚úÖ R√©vision callback trait√©:', revisionCallbackResponse.data.status);

    // 9. Test approbation finale
    console.log('\n‚úÖ 9. Test approbation finale...');
    const approveData = {
      orderId: orderId,
      action: 'approve',
      validationNotes: 'Contenu r√©vis√© excellent - pr√™t pour livraison au sanctuaire du client'
    };

    const approveResponse = await axios.post(`${API_BASE}/expert/validate-content`, approveData, {
      headers: { Authorization: `Bearer ${expertToken}` }
    });

    console.log('‚úÖ Contenu approuv√©:', approveResponse.data.message);

    // 10. V√©rification statut final
    console.log('\nüîç 10. V√©rification statut final...');
    const finalOrderResponse = await axios.get(`${API_BASE}/expert/orders/${orderId}`, {
      headers: { Authorization: `Bearer ${expertToken}` }
    });

    const finalOrder = finalOrderResponse.data;
    console.log('‚úÖ Statut final:', finalOrder.status);
    console.log('‚úÖ Validation Status:', finalOrder.expertValidation?.validationStatus);
    console.log('‚úÖ Livr√© le:', finalOrder.deliveredAt ? new Date(finalOrder.deliveredAt).toLocaleString('fr-FR') : 'Non livr√©');

    if (finalOrder.status !== 'completed') {
      throw new Error(`Statut final attendu 'completed', re√ßu: ${finalOrder.status}`);
    }

    console.log('\nüéâ WORKFLOW DE VALIDATION COMPLET R√âUSSI !');
    console.log('‚úÖ Commande cr√©√©e ‚Üí Expert traitement ‚Üí n8n g√©n√©ration ‚Üí awaiting_validation');
    console.log('‚úÖ Queue validation ‚Üí Rejet ‚Üí R√©g√©n√©ration ‚Üí Approbation ‚Üí Livraison');
    console.log('‚úÖ Design stellaire et workflow Expert Desk pr√™ts pour production');
    
    return {
      success: true,
      orderId,
      orderNumber: processResponse.data.orderNumber,
      finalStatus: finalOrder.status,
      revisionCount: finalOrder.revisionCount || 0
    };

  } catch (error) {
    console.error('\n‚ùå ERREUR WORKFLOW VALIDATION:', error.message);
    if (error.response) {
      console.error('   Status:', error.response.status);
      console.error('   Data:', error.response.data);
    }
    return { success: false, error: error.message };
  }
}

// Ex√©cution du test
if (require.main === module) {
  testValidationWorkflow()
    .then(result => {
      if (result.success) {
        console.log('\nüöÄ Test workflow validation termin√© avec succ√®s');
        console.log('üìä R√©sultats:', result);
        process.exit(0);
      } else {
        console.log('\nüí• Test workflow validation √©chou√©');
        process.exit(1);
      }
    })
    .catch(error => {
      console.error('üí• Erreur fatale:', error);
      process.exit(1);
    });
}

module.exports = { testValidationWorkflow };