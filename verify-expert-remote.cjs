#!/usr/bin/env node

/**
 * Script de v√©rification/cr√©ation d'expert pour production
 * √Ä ex√©cuter sur le serveur ou via SSH
 */

const mongoose = require('mongoose');
const bcrypt = require('bcrypt');

// Mod√®le Expert (reproduction exacte du mod√®le backend)
const expertSchema = new mongoose.Schema({
  email: {
    type: String,
    required: true,
    unique: true,
    lowercase: true
  },
  password: {
    type: String,
    required: true,
    minlength: 6
  },
  name: {
    type: String,
    required: true
  },
  role: {
    type: String,
    enum: ['expert', 'admin'],
    default: 'expert'
  },
  isActive: {
    type: Boolean,
    default: true
  }
}, {
  timestamps: true,
  collection: 'experts'
});

// Hash du mot de passe avant sauvegarde
expertSchema.pre('save', async function(next) {
  if (!this.isModified('password')) return next();
  
  try {
    const salt = await bcrypt.genSalt(10);
    this.password = await bcrypt.hash(this.password, salt);
    next();
  } catch (error) {
    next(error);
  }
});

// M√©thode de comparaison des mots de passe
expertSchema.methods.comparePassword = async function(candidatePassword) {
  return await bcrypt.compare(candidatePassword, this.password);
};

async function main() {
  try {
    console.log('üöÄ V√©rification Expert - Mode Production');
    console.log('='.repeat(50));
    
    // Connexion √† MongoDB (utilise MONGODB_URI de l'environnement)
    const MONGODB_URI = process.env.MONGODB_URI;
    
    if (!MONGODB_URI) {
      console.error('‚ùå MONGODB_URI non d√©fini dans les variables d\'environnement');
      console.log('');
      console.log('üí° Solutions possibles:');
      console.log('1. D√©finir MONGODB_URI avant d\'ex√©cuter:');
      console.log('   export MONGODB_URI="mongodb://votre-uri"');
      console.log('   node verify-expert-remote.cjs');
      console.log('');
      console.log('2. Ou passer l\'URI directement:');
      console.log('   MONGODB_URI="mongodb://votre-uri" node verify-expert-remote.cjs');
      process.exit(1);
    }
    
    console.log('üîå Connexion √† MongoDB...');
    console.log('URI:', MONGODB_URI.replace(/\/\/([^:]+):([^@]+)@/, '//***:***@')); // Masque les credentials
    
    await mongoose.connect(MONGODB_URI);
    console.log('‚úÖ Connexion MongoDB √©tablie');
    
    const Expert = mongoose.model('Expert', expertSchema);
    
    // V√©rification de l'expert existant
    const existingExpert = await Expert.findOne({ email: 'expert@oraclelumira.com' });
    
    if (existingExpert) {
      console.log('');
      console.log('üë§ Expert trouv√©:');
      console.log('- Email:', existingExpert.email);
      console.log('- Nom:', existingExpert.name);
      console.log('- R√¥le:', existingExpert.role);
      console.log('- Actif:', existingExpert.isActive);
      console.log('- Cr√©√© le:', existingExpert.createdAt);
      
      // Test du mot de passe
      console.log('');
      console.log('üîê Test du mot de passe "Lumira2025L"...');
      const isPasswordValid = await existingExpert.comparePassword('Lumira2025L');
      
      if (isPasswordValid) {
        console.log('‚úÖ Mot de passe correct!');
        console.log('');
        console.log('üéØ Diagnostic: L\'expert et le mot de passe sont corrects.');
        console.log('   Le probl√®me d\'authentification doit venir d\'ailleurs:');
        console.log('   - V√©rifiez l\'API backend');
        console.log('   - V√©rifiez les routes d\'authentification');
        console.log('   - V√©rifiez les logs du serveur');
      } else {
        console.log('‚ùå Mot de passe incorrect!');
        console.log('');
        console.log('üîß Correction en cours...');
        
        // Hash du nouveau mot de passe
        const salt = await bcrypt.genSalt(10);
        const hashedPassword = await bcrypt.hash('Lumira2025L', salt);
        
        // Mise √† jour directe
        await Expert.updateOne(
          { _id: existingExpert._id },
          { password: hashedPassword }
        );
        
        console.log('‚úÖ Mot de passe mis √† jour!');
        
        // V√©rification de la mise √† jour
        const updatedExpert = await Expert.findById(existingExpert._id);
        const isNewPasswordValid = await updatedExpert.comparePassword('Lumira2025L');
        
        if (isNewPasswordValid) {
          console.log('‚úÖ V√©rification: nouveau mot de passe correct!');
        } else {
          console.log('‚ùå Erreur: le nouveau mot de passe ne fonctionne pas!');
        }
      }
    } else {
      console.log('');
      console.log('‚ùå Aucun expert trouv√© avec l\'email expert@oraclelumira.com');
      console.log('');
      console.log('üîß Cr√©ation de l\'expert...');
      
      const newExpert = new Expert({
        email: 'expert@oraclelumira.com',
        password: 'Lumira2025L', // Sera hash√© automatiquement par le pre-save hook
        name: 'Oracle Expert',
        role: 'expert',
        isActive: true
      });
      
      await newExpert.save();
      console.log('‚úÖ Expert cr√©√© avec succ√®s!');
      
      // V√©rification de la cr√©ation
      const createdExpert = await Expert.findOne({ email: 'expert@oraclelumira.com' });
      const isPasswordValid = await createdExpert.comparePassword('Lumira2025L');
      
      if (isPasswordValid) {
        console.log('‚úÖ V√©rification: mot de passe correct!');
      } else {
        console.log('‚ùå Erreur: le mot de passe cr√©√© ne fonctionne pas!');
      }
    }
    
    console.log('');
    console.log('üìä R√©sum√© final:');
    const finalExpert = await Expert.findOne({ email: 'expert@oraclelumira.com' });
    const finalPasswordCheck = await finalExpert.comparePassword('Lumira2025L');
    
    console.log('- Expert existe:', finalExpert ? '‚úÖ' : '‚ùå');
    console.log('- Email correct:', finalExpert?.email === 'expert@oraclelumira.com' ? '‚úÖ' : '‚ùå');
    console.log('- Mot de passe valide:', finalPasswordCheck ? '‚úÖ' : '‚ùå');
    console.log('- Expert actif:', finalExpert?.isActive ? '‚úÖ' : '‚ùå');
    
    if (finalExpert && finalPasswordCheck && finalExpert.isActive) {
      console.log('');
      console.log('üéâ Succ√®s! L\'expert devrait pouvoir se connecter maintenant.');
      console.log('');
      console.log('Si le probl√®me persiste, v√©rifiez:');
      console.log('1. Les logs du serveur API backend');
      console.log('2. La route POST /api/expert/login');
      console.log('3. La configuration CORS');
      console.log('4. La connexion r√©seau entre frontend et backend');
    } else {
      console.log('');
      console.log('‚ùå Probl√®me d√©tect√©. R√©ex√©cutez le script ou v√©rifiez manuellement.');
    }
    
  } catch (error) {
    console.error('‚ùå Erreur:', error.message);
    if (error.code === 'ECONNREFUSED') {
      console.log('');
      console.log('üí° Conseils pour r√©soudre ECONNREFUSED:');
      console.log('1. V√©rifiez que MongoDB est d√©marr√©');
      console.log('2. V√©rifiez l\'URI de connexion');
      console.log('3. V√©rifiez les r√®gles de firewall/s√©curit√©');
      console.log('4. Pour un d√©ploiement Coolify, utilisez l\'URI interne du container');
    }
  } finally {
    await mongoose.connection.close();
    console.log('');
    console.log('üëã Connexion ferm√©e. Script termin√©.');
  }
}

main();
