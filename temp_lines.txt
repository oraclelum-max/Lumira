1	// Oracle Lumira - Commande SPA avec Stripe Elements
2	import React, { useState, useEffect } from 'react';
3	import { motion, AnimatePresence } from 'framer-motion';
4	import { ArrowLeft, ShoppingBag, Loader, AlertCircle, CheckCircle, CreditCard, Smartphone } from 'lucide-react';
5	import { useNavigate, useSearchParams } from 'react-router-dom';
6	import { loadStripe, StripeElementsOptions } from '@stripe/stripe-js';
7	import { 
8	  Elements, 
9	  PaymentElement, 
10	  PaymentRequestButtonElement,
11	  useStripe, 
12	  useElements 
13	} from '@stripe/react-stripe-js';
14	import { PRODUCT_CATALOG } from '../types/products';
15	import ProductOrderService from '../services/productOrder';
16	import { validateStripeKey } from '../utils/api';
17	
18	// Stripe initialization with validation
19	let stripePromise: Promise<any> | null = null;
20	
21	try {
22	  const stripeKey = validateStripeKey();
23	  stripePromise = loadStripe(stripeKey);
24	  console.log('Stripe initialized successfully');
25	} catch (error) {
26	  console.error('Stripe initialization failed:', error);
27	  stripePromise = null;
28	}
29	
30	// Stripe appearance customization (mystical theme)
31	const stripeAppearance = {
32	  theme: 'night' as const,
33	  variables: {
34	    colorPrimary: '#D4AF37', // mystical gold
35	    colorBackground: '#0F0B19', // mystical dark
36	    colorText: '#E5E7EB', // light text
37	    colorDanger: '#EF4444',
38	    borderRadius: '12px',
39	    fontFamily: 'Inter, system-ui, sans-serif',
40	  },
41	  rules: {
42	    '.Input': {
43	      backgroundColor: 'rgba(15, 11, 25, 0.8)',
44	      border: '1px solid rgba(212, 175, 55, 0.3)',
45	    },
46	    '.Input:focus': {
47	      borderColor: '#D4AF37',
48	      boxShadow: '0 0 0 1px #D4AF37',
49	    },
50	    '.Tab': {
51	      backgroundColor: 'rgba(15, 11, 25, 0.5)',
52	      border: '1px solid rgba(212, 175, 55, 0.2)',
53	    },
54	    '.Tab:hover': {
55	      backgroundColor: 'rgba(212, 175, 55, 0.1)',
56	    },
57	    '.Tab--selected': {
58	      backgroundColor: 'rgba(212, 175, 55, 0.2)',
59	      borderColor: '#D4AF37',
60	    },
61	  },
62	};
63	
64	interface CheckoutFormProps {
65	  clientSecret: string;
66	  orderId: string;
67	  amount: number;
68	  productName: string;
69	  onSuccess: () => void;
70	}
71	
72	const CheckoutForm: React.FC<CheckoutFormProps> = ({ 
73	  clientSecret,
74	  orderId, 
75	  amount, 
76	  productName,
77	  onSuccess 
78	}) => {
79	  const stripe = useStripe();
80	  const elements = useElements();
81	  const [isLoading, setIsLoading] = useState(false);
82	  const [errorMessage, setErrorMessage] = useState<string | null>(null);
83	  const [paymentRequest, setPaymentRequest] = useState<any>(null);
84	
85	  // Initialize Payment Request Button (Apple Pay, Google Pay, etc.)
86	  useEffect(() => {
87	    if (!stripe) return;
88	
89	    const pr = stripe.paymentRequest({
90	      country: 'FR',
91	      currency: 'eur',
92	      total: {
93	        label: productName,
94	        amount: amount,
95	      },
96	      requestPayerName: true,
97	      requestPayerEmail: true,
98	    });
99	
100	    pr.canMakePayment().then((result) => {
101	      if (result) {
102	        setPaymentRequest(pr);
103	      }
104	    });
105	
106	    pr.on('paymentmethod', async (event) => {
107	      try {
108	        // Create PaymentIntent for Payment Request
109	        const { error: confirmError } = await stripe.confirmPayment({
110	          clientSecret,
111	          confirmParams: {
112	            payment_method: event.paymentMethod.id,
113	            return_url: `${window.location.origin}/confirmation?order_id=${orderId}`,
114	          },
115	          redirect: 'if_required'
116	        });
117	
118	        if (confirmError) {
119	          event.complete('fail');
120	          setErrorMessage(confirmError.message || 'Erreur lors du paiement express');
121	        } else {
122	          event.complete('success');
123	          onSuccess();
124	        }
125	      } catch (error) {
126	        event.complete('fail');
127	        setErrorMessage('Erreur lors du paiement express');
128	        console.error('Payment Request error:', error);
129	      }
130	    });
131	  }, [stripe, amount, productName, clientSecret, orderId, onSuccess]);
132	
133	  const handleSubmit = async (event: React.FormEvent) => {
134	    event.preventDefault();
135	
136	    if (!stripe || !elements) {
137	      return;
138	    }
139	
140	    setIsLoading(true);
141	    setErrorMessage(null);
142	
143	    try {
144	      const returnUrl = `${window.location.origin}/confirmation?order_id=${orderId}`;
145	      
146	      const { error } = await stripe.confirmPayment({
147	        elements,
148	        confirmParams: {
149	          return_url: returnUrl,
150	        },
151	        redirect: 'if_required'
152	      });
153	
154	      if (error) {
155	        setErrorMessage(error.message || 'Une erreur est survenue lors du paiement');
156	      } else {
157	        onSuccess();
158	      }
159	    } catch (error) {
160	      console.error('Payment error:', error);
161	      setErrorMessage('Une erreur inattendue est survenue');
162	    } finally {
163	      setIsLoading(false);
164	    }
165	  };
166	
167	  return (
168	    <div className="space-y-6">
169	      {/* Payment Request Button (Apple Pay, Google Pay) */}
170	      {paymentRequest && (
171	        <motion.div
172	          initial={{ opacity: 0, y: -10 }}
173	          animate={{ opacity: 1, y: 0 }}
174	          className="mb-6"
175	        >
176	          <div className="flex items-center justify-center mb-4 space-x-2 text-mystical-gold">
177	            <Smartphone className="w-5 h-5" />
178	            <span className="text-sm font-medium">Paiement express</span>
179	          </div>
180	          <PaymentRequestButtonElement 
181	            options={{ 
182	              paymentRequest,
183	              style: {
184	                paymentRequestButton: {
185	                  theme: 'dark',
186	                  height: '48px',
187	                  type: 'default',
188	                },
189	              },
190	            }} 
191	          />
192	          <div className="mt-4 flex items-center">
193	            <div className="flex-1 h-px bg-gradient-to-r from-transparent via-mystical-gold/30 to-transparent"></div>
194	            <span className="px-4 text-sm text-gray-400">ou</span>
195	            <div className="flex-1 h-px bg-gradient-to-r from-transparent via-mystical-gold/30 to-transparent"></div>
196	          </div>
197	        </motion.div>
198	      )}
199	
200	      {/* Traditional Payment Form */}
201	      <form onSubmit={handleSubmit} className="space-y-6">
202	        <div className="flex items-center space-x-2 text-mystical-gold mb-4">
203	          <CreditCard className="w-5 h-5" />
204	          <span className="font-medium">Informations de paiement</span>
205	        </div>
206	
207	        <PaymentElement 
208	          options={{
209	            layout: 'tabs',
210	            business: {
211	              name: 'Oracle Lumira',
212	            },
213	          }}
214	        />
215	
216	        {errorMessage && (
217	          <motion.div
218	            initial={{ opacity: 0, y: -10 }}
219	            animate={{ opacity: 1, y: 0 }}
220	            className="flex items-center space-x-2 text-red-400 bg-red-900/20 p-3 rounded-lg border border-red-500/30"
221	          >
222	            <AlertCircle className="w-5 h-5 flex-shrink-0" />
223	            <span className="text-sm">{errorMessage}</span>
224	          </motion.div>
225	        )}
226	
227	        <button
228	          type="submit"
229	          disabled={!stripe || !elements || isLoading}
230	          className="w-full bg-gradient-to-r from-mystical-gold to-mystical-gold-light text-mystical-dark font-bold py-4 px-8 rounded-xl transition-all duration-300 hover:shadow-mystical-gold/50 hover:shadow-lg disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center space-x-2"
231	        >
232	          {isLoading ? (
233	            <>
234	              <Loader className="w-5 h-5 animate-spin" />
235	              <span>Traitement en cours...</span>
236	            </>
237	          ) : (
238	            <>
239	              <CheckCircle className="w-5 h-5" />
240	              <span>Confirmer le paiement • {ProductOrderService.formatPrice(amount)}</span>
241	            </>
242	          )}
243	        </button>
244	      </form>
245	    </div>
246	  );
247	};
248	
249	const CommandeTemple: React.FC = () => {
250	  const navigate = useNavigate();
251	  const [searchParams] = useSearchParams();
252	  const productId = searchParams.get('product');
253	  
254	  const [clientSecret, setClientSecret] = useState<string>('');
255	  const [orderId, setOrderId] = useState<string>('');
256	  const [isLoading, setIsLoading] = useState(true);
257	  const [error, setError] = useState<string | null>(null);
258	  const [customerEmail, setCustomerEmail] = useState<string>('');
259	
260	  const product = productId ? PRODUCT_CATALOG[productId] : null;
261	
262	  useEffect(() => {
263	    if (!productId || !product) {
264	      setError('Produit non trouvé');
265	      setIsLoading(false);
266	      return;
267	    }
268	
269	    const initializePayment = async () => {
270	      try {
271	        const paymentData = await ProductOrderService.createPaymentIntent(
272	          productId,
273	          customerEmail || undefined
274	        );
275	
276	        setClientSecret(paymentData.clientSecret);
277	        setOrderId(paymentData.orderId);
278	        setIsLoading(false);
279	      } catch (err) {
280	        console.error('Failed to initialize payment:', err);
281	        setError(err instanceof Error ? err.message : 'Erreur lors de l\'initialisation du paiement');
282	        setIsLoading(false);
283	      }
284	    };
285	
286	    initializePayment();
287	  }, [productId, product, customerEmail]);
288	
289	  const handlePaymentSuccess = () => {
290	    navigate(`/confirmation?order_id=${orderId}`);
291	  };
292	
293	  const handleBackToLevels = () => {
294	    navigate('/#niveaux');
295	  };
296	
297	  if (isLoading) {
298	    return (
299	      <div className="min-h-screen bg-gradient-to-br from-mystical-dark via-mystical-purple to-mystical-dark flex items-center justify-center">
300	        <motion.div
301	          initial={{ opacity: 0 }}
302	          animate={{ opacity: 1 }}
303	          className="flex flex-col items-center space-y-4"
304	        >
305	          <Loader className="w-8 h-8 text-mystical-gold animate-spin" />
306	          <p className="text-mystical-gold">Préparation de votre commande...</p>
307	        </motion.div>
308	      </div>
309	    );
310	  }
311	
312	  if (error || !product) {
313	    return (
314	      <div className="min-h-screen bg-gradient-to-br from-mystical-dark via-mystical-purple to-mystical-dark flex items-center justify-center">
315	        <motion.div
316	          initial={{ opacity: 0 }}
317	          animate={{ opacity: 1 }}
318	          className="max-w-md p-8 text-center space-y-4"
319	        >
320	          <AlertCircle className="w-16 h-16 text-red-400 mx-auto" />
321	          <h2 className="text-2xl font-bold text-white">Erreur</h2>
322	          <p className="text-gray-300">{error || 'Produit non trouvé'}</p>
323	          <button
324	            onClick={handleBackToLevels}
325	            className="bg-mystical-gold text-mystical-dark px-6 py-3 rounded-lg font-semibold hover:bg-mystical-gold-light transition-colors"
326	          >
327	            Retour aux niveaux
328	          </button>
329	        </motion.div>
330	      </div>
331	    );
332	  }
333	
334	  const elementsOptions: StripeElementsOptions = {
335	    clientSecret,
336	    appearance: stripeAppearance,
337	  };
338	
339	  return (
340	    <div className="min-h-screen bg-gradient-to-br from-mystical-dark via-mystical-purple to-mystical-dark">
341	      <div className="container mx-auto px-4 py-8">
342	        {/* Header */}
343	        <div className="flex items-center justify-between mb-8">
344	          <button
345	            onClick={handleBackToLevels}
346	            className="flex items-center space-x-2 text-mystical-gold hover:text-mystical-gold-light transition-colors"
347	          >
348	            <ArrowLeft className="w-5 h-5" />
349	            <span>Retour</span>
350	          </button>
351	          
352	          <h1 className="text-2xl md:text-3xl font-bold text-center bg-gradient-to-r from-mystical-gold to-mystical-gold-light bg-clip-text text-transparent">
353	            Oracle Lumira - Commande
354	          </h1>
355	          
356	          <div className="w-16"></div> {/* Spacer for centering */}
357	        </div>
358	
359	        <div className="max-w-4xl mx-auto grid md:grid-cols-2 gap-8">
360	          {/* Product Summary */}
361	          <motion.div
362	            initial={{ opacity: 0, x: -20 }}
363	            animate={{ opacity: 1, x: 0 }}
364	            className="space-y-6"
365	          >
366	            <div className="bg-gradient-to-br from-mystical-dark/50 to-mystical-purple/30 backdrop-blur-sm border border-mystical-gold/30 rounded-2xl p-6">
367	              <div className="flex items-start space-x-4">
368	                <div className="p-3 bg-mystical-gold/20 rounded-lg">
369	                  <ShoppingBag className="w-6 h-6 text-mystical-gold" />
370	                </div>
371	                <div className="flex-1">
372	                  <h3 className="text-xl font-bold text-white mb-2">{product.name}</h3>
373	                  <p className="text-gray-300 mb-4">{product.description}</p>
374	                  
375	                  <div className="space-y-2">
376	                    <div className="flex justify-between items-center">
377	                      <span className="text-gray-400">Prix</span>
378	                      <span className="text-2xl font-bold text-mystical-gold">{product.price}</span>
379	                    </div>
380	                    <div className="flex justify-between items-center">
381	                      <span className="text-gray-400">Durée</span>
382	                      <span className="text-white">{product.metadata.duration}</span>
383	                    </div>
384	                  </div>
385	                </div>
386	              </div>
387	            </div>
388	
389	            {/* Features */}
390	            <div className="bg-gradient-to-br from-mystical-dark/50 to-mystical-purple/30 backdrop-blur-sm border border-mystical-gold/30 rounded-2xl p-6">
391	              <h4 className="font-bold text-white mb-4">Ce qui est inclus :</h4>
392	              <div className="space-y-3">
393	                {product.features.map((feature, index) => (
394	                  <div key={index} className="flex items-start space-x-3">
395	                    <CheckCircle className="w-5 h-5 text-mystical-gold flex-shrink-0 mt-0.5" />
396	                    <span className="text-gray-300">{feature}</span>
397	                  </div>
398	                ))}
399	              </div>
400	            </div>
401	          </motion.div>
402	
403	          {/* Payment Form */}
404	          <motion.div
405	            initial={{ opacity: 0, x: 20 }}
406	            animate={{ opacity: 1, x: 0 }}
407	            className="space-y-6"
408	          >
409	            <div className="bg-gradient-to-br from-mystical-dark/50 to-mystical-purple/30 backdrop-blur-sm border border-mystical-gold/30 rounded-2xl p-6">
410	              <h3 className="text-xl font-bold text-white mb-6">Finaliser votre commande</h3>
411	              
412	              {/* Email Input */}
413	              <div className="mb-6">
414	                <label className="block text-sm font-medium text-gray-300 mb-2">
415	                  Adresse email (optionnel)
416	                </label>
417	                <input
418	                  type="email"
419	                  value={customerEmail}
420	                  onChange={(e) => setCustomerEmail(e.target.value)}
421	                  placeholder="votre@email.com"
422	                  className="w-full px-4 py-3 bg-mystical-dark/80 border border-mystical-gold/30 rounded-lg text-white placeholder-gray-500 focus:border-mystical-gold focus:outline-none focus:ring-1 focus:ring-mystical-gold"
423	                />
424	                <p className="text-xs text-gray-400 mt-1">
425	                  Pour recevoir votre confirmation et vos accès
426	                </p>
427	              </div>
428	
429	              {/* Stripe Elements */}
430	              {clientSecret && (
431	                <Elements stripe={stripePromise} options={elementsOptions}>
432	                  <CheckoutForm
433	                    clientSecret={clientSecret}
434	                    orderId={orderId}
435	                    amount={parseInt(product.price.replace('€', '')) * 100} // Convert to cents
436	                    productName={product.name}
437	                    onSuccess={handlePaymentSuccess}
438	                  />
439	                </Elements>
440	              )}
441	            </div>
442	
443	            {/* Security Notice */}
444	            <div className="text-center text-sm text-gray-400 space-y-2">
445	              <p>🔒 Paiement sécurisé par Stripe</p>
446	              <p>Vos données bancaires sont chiffrées et protégées</p>
447	            </div>
448	          </motion.div>
449	        </div>
450	      </div>
451	    </div>
452	  );
453	};
454	
455	export default CommandeTemple;
